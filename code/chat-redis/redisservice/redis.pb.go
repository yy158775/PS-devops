// Code generated by protoc-gen-go. DO NOT EDIT.
// source: redis.proto

package redisservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserName struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserName) Reset()         { *m = UserName{} }
func (m *UserName) String() string { return proto.CompactTextString(m) }
func (*UserName) ProtoMessage()    {}
func (*UserName) Descriptor() ([]byte, []int) {
	return fileDescriptor_d954120a2319ff8f, []int{0}
}

func (m *UserName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserName.Unmarshal(m, b)
}
func (m *UserName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserName.Marshal(b, m, deterministic)
}
func (m *UserName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserName.Merge(m, src)
}
func (m *UserName) XXX_Size() int {
	return xxx_messageInfo_UserName.Size(m)
}
func (m *UserName) XXX_DiscardUnknown() {
	xxx_messageInfo_UserName.DiscardUnknown(m)
}

var xxx_messageInfo_UserName proto.InternalMessageInfo

func (m *UserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type UserInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password             string   `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d954120a2319ff8f, []int{1}
}

func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserInfo.Unmarshal(m, b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return xxx_messageInfo_UserInfo.Size(m)
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d954120a2319ff8f, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type NewUser struct {
	UserName             string   `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewUser) Reset()         { *m = NewUser{} }
func (m *NewUser) String() string { return proto.CompactTextString(m) }
func (*NewUser) ProtoMessage()    {}
func (*NewUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_d954120a2319ff8f, []int{3}
}

func (m *NewUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewUser.Unmarshal(m, b)
}
func (m *NewUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewUser.Marshal(b, m, deterministic)
}
func (m *NewUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewUser.Merge(m, src)
}
func (m *NewUser) XXX_Size() int {
	return xxx_messageInfo_NewUser.Size(m)
}
func (m *NewUser) XXX_DiscardUnknown() {
	xxx_messageInfo_NewUser.DiscardUnknown(m)
}

var xxx_messageInfo_NewUser proto.InternalMessageInfo

func (m *NewUser) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *NewUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*UserName)(nil), "redisservice.UserName")
	proto.RegisterType((*UserInfo)(nil), "redisservice.UserInfo")
	proto.RegisterType((*Empty)(nil), "redisservice.Empty")
	proto.RegisterType((*NewUser)(nil), "redisservice.NewUser")
}

func init() { proto.RegisterFile("redis.proto", fileDescriptor_d954120a2319ff8f) }

var fileDescriptor_d954120a2319ff8f = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x4a, 0x4d, 0xc9,
	0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x73, 0x8a, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0x95, 0xd4, 0xb8, 0x38, 0x42, 0x8b, 0x53, 0x8b, 0xfc, 0x12, 0x73, 0x53, 0x85, 0xa4,
	0x10, 0x6c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x38, 0x5f, 0x29, 0x08, 0x22, 0xe7, 0x99,
	0x97, 0x96, 0x2f, 0xc4, 0xc7, 0xc5, 0xe4, 0x99, 0x02, 0x56, 0xc1, 0x1a, 0xc4, 0xe4, 0x99, 0x82,
	0xa2, 0x8f, 0x09, 0x55, 0x1f, 0x48, 0x2e, 0x20, 0xb1, 0xb8, 0xb8, 0x3c, 0xbf, 0x28, 0x45, 0x82,
	0x19, 0x22, 0x07, 0xe3, 0x2b, 0xb1, 0x73, 0xb1, 0xba, 0xe6, 0x16, 0x94, 0x54, 0x2a, 0x39, 0x72,
	0xb1, 0xfb, 0xa5, 0x96, 0x83, 0xf4, 0xe0, 0x73, 0x03, 0x8a, 0x59, 0x4c, 0xa8, 0x66, 0x19, 0x75,
	0x32, 0x72, 0xf1, 0x04, 0x81, 0x3c, 0x16, 0x0c, 0xf1, 0x98, 0x90, 0x3d, 0x17, 0xaf, 0x7b, 0x6a,
	0x09, 0x48, 0xaf, 0x53, 0x25, 0x58, 0xb7, 0x98, 0x1e, 0xb2, 0xc7, 0xf5, 0x60, 0xa6, 0x4a, 0x61,
	0x11, 0x07, 0xfb, 0xd2, 0x82, 0x8b, 0xcb, 0x33, 0xaf, 0x38, 0xb5, 0x08, 0x6c, 0x86, 0x90, 0x28,
	0xaa, 0x2a, 0xa8, 0x73, 0xa5, 0x84, 0x51, 0x85, 0xc1, 0xde, 0x49, 0x62, 0x03, 0x07, 0xb4, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x9e, 0xab, 0xc7, 0x77, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RedisServiceClient is the client API for RedisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedisServiceClient interface {
	GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserInfo, error)
	InsertUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Empty, error)
}

type redisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisServiceClient(cc grpc.ClientConnInterface) RedisServiceClient {
	return &redisServiceClient{cc}
}

func (c *redisServiceClient) GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/redisservice.RedisService/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) InsertUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/redisservice.RedisService/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisServiceServer is the server API for RedisService service.
type RedisServiceServer interface {
	GetUserByName(context.Context, *UserName) (*UserInfo, error)
	InsertUser(context.Context, *NewUser) (*Empty, error)
}

// UnimplementedRedisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRedisServiceServer struct {
}

func (*UnimplementedRedisServiceServer) GetUserByName(ctx context.Context, req *UserName) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (*UnimplementedRedisServiceServer) InsertUser(ctx context.Context, req *NewUser) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}

func RegisterRedisServiceServer(s *grpc.Server, srv RedisServiceServer) {
	s.RegisterService(&_RedisService_serviceDesc, srv)
}

func _RedisService_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redisservice.RedisService/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).GetUserByName(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redisservice.RedisService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).InsertUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "redisservice.RedisService",
	HandlerType: (*RedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _RedisService_GetUserByName_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _RedisService_InsertUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis.proto",
}
